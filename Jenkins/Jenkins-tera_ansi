pipeline {
    agent any

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_DEFAULT_REGION    = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/NetanelAviezer/web_resume_project.git'
            }
        }
        
        stage('Pre-cleanup') {
            steps {
                script {
                    docker.image('amazon/aws-cli').inside('--entrypoint=""') {
                        sh 'aws ec2 delete-key-pair --key-name jenkins-key || true'
                    }
                }
            }
        }
        
        stage('Terraform init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        
        stage('Plan') {
            steps {
                withCredentials([
                    string(credentialsId: 'jenkins-public-key', variable: 'PUBLIC_KEY'),
                    string(credentialsId: 'db-username', variable: 'DB_USERNAME'),
                    string(credentialsId: 'db-password', variable: 'DB_PASSWORD')
                ]) {
                    dir('terraform') {
                        sh '''
                        terraform plan \
                          -var="jenkins_public_key=$PUBLIC_KEY" \
                          -var="db_username=$DB_USERNAME" \
                          -var="db_password=$DB_PASSWORD" \
                          -out tfplan
                        '''
                        sh 'terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }
        }
        
        stage('Apply / Destroy') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'jenkins-public-key', variable: 'PUBLIC_KEY'),
                        string(credentialsId: 'db-username', variable: 'DB_USERNAME'),
                        string(credentialsId: 'db-password', variable: 'DB_PASSWORD')
                    ]) {
                        dir('terraform') {
                            if (params.action == 'apply') {
                                if (!params.autoApprove) {
                                    def plan = readFile 'tfplan.txt'
                                    input message: "Do you want to apply the plan?",
                                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                                }
                                sh '''
                                terraform apply \
                                  -var="jenkins_public_key=$PUBLIC_KEY" \
                                  -var="db_username=$DB_USERNAME" \
                                  -var="db_password=$DB_PASSWORD" \
                                  -input=false tfplan
                                '''
                            } else if (params.action == 'destroy') {
                                sh '''
                                terraform destroy \
                                  -var="jenkins_public_key=$PUBLIC_KEY" \
                                  -var="db_username=$DB_USERNAME" \
                                  -var="db_password=$DB_PASSWORD" \
                                  --auto-approve
                                '''
                            } else {
                                error "Invalid action selected. Please choose either 'apply' or 'destroy'."
                            }
                        }
                    }
                }
            }
        }
        
        stage('Ansible Deploy') {
            when {
                expression { params.action == 'apply' }
            }
            steps {
                script {
                    dir('terraform') {
                        def ec2_ip = sh(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
                        def rds_endpoint = sh(script: 'terraform output -raw rds_endpoint', returnStdout: true).trim()
                        env.EC2_PUBLIC_IP = ec2_ip
                        env.RDS_ENDPOINT = rds_endpoint
                    }
                    
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-private-key', keyFileVariable: 'SSH_KEY_FILE')]) {
                        sh 'cp "$SSH_KEY_FILE" jenkins_key.pem'
                        sh 'chmod 600 jenkins_key.pem'
                    }
                    
                    writeFile file: 'inventory.ini', text: """[ec2]
${env.EC2_PUBLIC_IP} ansible_user=ubuntu ansible_ssh_private_key_file=jenkins_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'"""
                    
                    withCredentials([
                        string(credentialsId: 'db-username', variable: 'DB_USERNAME'),
                        string(credentialsId: 'db-password', variable: 'DB_PASSWORD')
                    ]) {
                        sh """
                        ansible-playbook -i inventory.ini ansible/deploy.yml \
                          -e "rds_endpoint=${env.RDS_ENDPOINT}" \
                          -e "rds_username=\${DB_USERNAME}" \
                          -e "rds_password='\${DB_PASSWORD}'" \
                          -e "rds_database=resume_db" \
                          -e "rds_port=5432" \
                          -e "rds_ssl_mode=require" \
                        """
                    }
                }
            }
        }
        
        stage('Verify Application') {
            when {
                expression { params.action == 'apply' }
            }
            steps {
                script {
                    sleep(time: 30, unit: 'SECONDS')
                    
                    def maxRetries = 5
                    def retryCount = 0
                    def appStatus = false
                    
                    while (retryCount < maxRetries && !appStatus) {
                        try {
                            def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://${env.EC2_PUBLIC_IP}:5000", returnStdout: true).trim()
                            
                            if (response == '200') {
                                appStatus = true
                                echo "Application verification successful"
                            } else {
                                retryCount++
                                if (retryCount < maxRetries) {
                                    sleep(time: 15, unit: 'SECONDS')
                                }
                            }
                        } catch (Exception e) {
                            retryCount++
                            if (retryCount < maxRetries) {
                                sleep(time: 15, unit: 'SECONDS')
                            }
                        }
                    }
                    
                    if (!appStatus) {
                        withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-private-key', keyFileVariable: 'SSH_KEY_FILE')]) {
                            sh """
                            ssh -i jenkins_key.pem -o StrictHostKeyChecking=no ubuntu@${env.EC2_PUBLIC_IP} 'docker logs resume_web'
                            """
                        }
                        
                        error "Application verification failed"
                    }
                }
            }
        }
        
        stage('Display Application URLs') {
            when {
                expression { params.action == 'apply' }
            }
            steps {
                script {
                    echo """
====================================================================================================
APPLICATION DEPLOYED SUCCESSFULLY
====================================================================================================
Main Application URL: http://${env.EC2_PUBLIC_IP}:5000/
Monitoring URL: http://${env.EC2_PUBLIC_IP}:5000/monitor
====================================================================================================
                    """
                    
                    // Create a file with the URLs for easy reference
                    writeFile file: 'application_urls.txt', text: """
Main Application URL: http://${env.EC2_PUBLIC_IP}:5000/
Monitoring URL: http://${env.EC2_PUBLIC_IP}:5000/monitor
                    """
                    
                    // Archive the URLs file as an artifact
                    archiveArtifacts artifacts: 'application_urls.txt', onlyIfSuccessful: true
                }
            }
        }
    }
    
    post {
        always {
            sh 'rm -f jenkins_key.pem || true'
            sh 'rm -f inventory.ini || true'
            sh 'find . -name "*.vault" -type f -delete || true'
            sh 'rm -f tfplan.txt || true'
        }
        success {
            echo "Deployment completed successfully"
        }
        failure {
            echo "Deployment failed"
        }
    }
}